
#include <stdint.h>

#include <stdbool.h>

// stellaris icin:
 #include "inc/lm4f120h5qr.h"

//
 #include "inc/hw_ints.h"

#include "inc/hw_types.h"

#include "inc/hw_memmap.h"

#include "driverlib/sysctl.h"

#include "driverlib/timer.h"

static inline void disable_interrupts() { asm("CPSID I"); }
static inline void enable_interrupts() { asm("CPSIE I"); }
static inline void wait_for_interrupt() { asm("WFI"); }
int saniye,salise;

// baslangictan itibaren olusan systick kesmesi sayisi

uint32_t systick_count = 0;

// ekran guncelleme kesmesinin sayaci

int ekran_guncelle_sayac = 0;
volatile long delay;
// 1 saniyedeki systick kesmesi sayisi

#define SYSTICK_HZ 10000

// 1 saniyede kac kere ekran guncelleme kesmesi olacagi

#define EKRAN_KESME_HZ 400

// ekranda gosterilen sayi


void init_port_B() {

    volatile unsigned long delay;

    SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOB;

    delay = SYSCTL_RCGC2_R;

    GPIO_PORTB_DIR_R |= 0xFF;

    GPIO_PORTB_AFSEL_R &= ~0xFF;

    GPIO_PORTB_DEN_R |= 0xFF;

}
void init_port_F() {

    volatile unsigned long tmp; // bu degisken gecikme yapmak icin gerekli

    SYSCTL_RCGCGPIO_R |= 0x00000020;  // 1) activate clock for Port F

    tmp = SYSCTL_RCGCGPIO_R;     // allow time for clock to start

    GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock GPIO Port F

    GPIO_PORTF_CR_R = 0x1F;        // allow changes to PF4­0

    // only PF0 needs to be unlocked, other bits can't be locked

    GPIO_PORTF_AMSEL_R = 0x00;     // 3) disable analog on PF

    GPIO_PORTF_PCTL_R = 0x00000000;   // 4) PCTL GPIO on PF4­0

    GPIO_PORTF_DIR_R = 0x0E;       // 5) PF4,PF0 in, PF3­1 out

    GPIO_PORTF_AFSEL_R = 0x00;     // 6) disable alt funct on PF7­0

    GPIO_PORTF_PUR_R = 0x11;       // enable pull­up on PF0 and PF4

    GPIO_PORTF_DEN_R = 0x1F;       // 7) enable digital I/O on PF4­0

}

void init_port_E() {

    volatile unsigned long delay;

    SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOE;

    delay = SYSCTL_RCGC2_R;

    GPIO_PORTE_DIR_R |= 0xff;

    GPIO_PORTE_AFSEL_R &= ~0xff;

    GPIO_PORTE_DEN_R |= 0xff;

}

void init_timer_0A(int period) {

    // timer_0 modulunu aktiflestir

    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);

    // timer_0 i periyodik olarak ayarla

    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);

    // timer_0A modulunu "period" sayisindan geri sayacak sekilde ayarla

    TimerLoadSet(TIMER0_BASE, TIMER_A, period);

    // timer_0A kesmesini aktiflesitr
    IntEnable(INT_TIMER0A);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    // timer_0A'yi baslat

    TimerEnable(TIMER0_BASE, TIMER_A);

}
void PortF_interrupt_handler() {

disable_interrupts();

GPIO_PORTF_ICR_R = 0b10000; // clear interrupt flag4
saniye=0;
salise=0;
enable_interrupts();

}
void PF4_interrupt_init() {

GPIO_PORTF_IS_R &= ~0b10000; // (d) PC4 is edge-sensitive

GPIO_PORTF_IBE_R &= ~0b10000;// PC4 is not both edges

GPIO_PORTF_IEV_R &= ~0b10000;// PC4 falling edge event

GPIO_PORTF_ICR_R = 0b10000; // (e) clear flag4

GPIO_PORTF_IM_R |= 0b10000; // (f) arm interrupt on PC4
NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0x00A00000; // (g) priority 5

NVIC_EN0_R |= (1<<30); // (h) enable interrupt 30 in NVIC
}
void SysTick_Init(unsigned long period) {

    NVIC_ST_CTRL_R = 0;      // disable SysTick during setup

    NVIC_ST_RELOAD_R = period-1;      // reload value

    NVIC_ST_CURRENT_R = 0;      // any write to current clears it

    NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R & 0x00FFFFFF) | 0x40000000; // priority 2

    NVIC_ST_CTRL_R = 0x07; // enable SysTick with core clock and interrupts

    // enable interrupts after all initialization is finished

}

// 0'dan 9'a kadar olan sayilarin seven segment kodlari

// bit sirasi: g f e d c b a

uint8_t kodlar[10] = {

    0b0111111,

    0b0000110,

    0b1011011,

    0b1001111,

    0b1100110,

    0b1101101,

    0b1111101,

    0b0000111,

    0b1111111,

    0b1101111

};



/** systick kesmesinde calistirilan fonksiyon */

void systick_handler() {

    systick_count++;

    // 0.5 saniyede bir sayiyi arttir

    if (systick_count % (SYSTICK_HZ / 100 ) == 0){
        salise++;
        if(salise==100){
            salise=0;
            saniye++;
        }
        if(saniye==60)
        	saniye=0;
    }
}

/** Timer0A kesmesinde calistirilan fonksiyon */

void ekran_guncelleme_timer() {

    // timer interrupt clear (timer kesmesini algiladigimizi bildiriyoruz)

    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    ekran_guncelle_sayac++;

    if (ekran_guncelle_sayac % 4 == 1) {

     int birler = salise % 10;

 GPIO_PORTE_DATA_R &= ~(0b11111); // hepsini kapat

 GPIO_PORTB_DATA_R = ~kodlar[birler];

 GPIO_PORTE_DATA_R |= 0b00010; // birler basamagini aktiflestir

    } else if (ekran_guncelle_sayac % 4 == 2) {

 int onlar = (salise/ 10) % 10;

 GPIO_PORTE_DATA_R &= ~(0b11111); // hepsini kapat

 GPIO_PORTB_DATA_R = ~kodlar[onlar];

 GPIO_PORTE_DATA_R |= 0b00100; // onlar basamagini aktiflestir

    } else if (ekran_guncelle_sayac % 4 == 3) {

 int yuzler = saniye % 10;

 GPIO_PORTE_DATA_R &= ~(0b11111); // hepsini kapat

 GPIO_PORTB_DATA_R = ~kodlar[yuzler];

 GPIO_PORTE_DATA_R |= 0b01000; // yuzler basamagini aktiflestir

    } else if (ekran_guncelle_sayac % 4 == 0) {

 int binler = (saniye / 10 ) % 10;

 GPIO_PORTE_DATA_R &= ~(0b11111); // hepsini kapat

 GPIO_PORTB_DATA_R = ~kodlar[binler];

 GPIO_PORTE_DATA_R |= 0b10000; // binler basamagini aktiflestir

    }



}

int main() {
	init_port_B();
	 init_port_E();
    init_port_F();
    PF4_interrupt_init();

    //noktanin yanmasi icin
   // GPIO_PORTE_DATA_R &= ~0b0100;
    disable_interrupts();
    // sagdaki buttonun degerini oku, degiskene degerini ata
    // Ekran guncelleme islemi icin saniyede EKRAN_KESME_HZ tane kesme uretilecek

            init_timer_0A(16000000 / EKRAN_KESME_HZ);

            // Zaman olcmek icin saniyede SYSTICK_HZ tane kesme uretilecek

            SysTick_Init(16000000/ SYSTICK_HZ);
            enable_interrupts(); // kesmeleri aktiflestir

    int button_sag = GPIO_PORTF_DATA_R & 0b00001;
while(1){
         wait_for_interrupt();

    }
}



